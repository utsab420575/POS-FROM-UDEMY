---------------all commit--------
https://github.com/easylearningbd/laravel-point-of-sale






--------------------install project---------------------------
1.download composer(if not installed)
check composer and php

php -v
composer -V
https://getcomposer.org/download/


2.create project 
composer create-project laravel/laravel my-project


------------------------------Breeze Install----------------------------
---------Breeze install(video1-3)----------------

//Breeze Install

//go to this link(no need)
//https://laravel.com/docs/11.x/starter-kits#laravel-breeze

//step1(everything should run in gitbash)
composer require laravel/breeze --dev

//step2
php artisan breeze:install



blade → ✔️ great for traditional apps

yes to dark mode → ✔️ nice UX feature

PHPUnit → ✔️ standard and robust testing



//step3 install nodejs if not installed in your computer(for one time in pc)
https://nodejs.org/en

//step4(for this we should run it using gitbash)
npm install
npm run dev

(press enter or ctrl+c after executing)

//step5
connect with database in .env file

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=quickexambill
DB_USERNAME=root
DB_PASSWORD=

SESSION_DRIVER=file
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

//step6
php artisan migrate

//step7(From Here we can get home page and get redimate login,logout and register page)
http://127.0.0.1:8000/






--------------------------------------------------CRUD-----------------------------------------------------

For CRUD:
Route Name Formuala:
	group name/operation
	Route::method('/group-name/operation', 'ControllerMethod')->name('group-name.operation');

Read এর কাজ:
	 Route::get('/customer/all', 'AllCustomer')->name('customer.all')->middleware('permission:customer.all');
	(এখানে edit,delete এর লিংক থাকবে।)
Add এর জন্য:
	Route::get('/customer/add', 'AddCustomer')->name('customer.add')->middleware('permission:customer.add');
        Route::post('/customer/store', 'StoreCustomer')->name('customer.store')->middleware('permission:customer.store');
Update এর জন্য:
	Route::get('/customer/edit/{id}', 'EditCustomer')->name('customer.edit')->middleware('permission:customer.edit');
        Route::post('/customer/update', 'UpdateCustomer')->name('customer.update')->middleware('permission:customer.update');
Delete এর জন্য:
	Route::get('/customer/delete/{id}', 'DeleteCustomer')->name('customer.delete')->middleware('permission:customer.delete');


// Customer
    Route::controller(CustomerController::class)->group(function () {
        Route::get('/customer/all', 'AllCustomer')->name('customer.all')->middleware('permission:customer.all');
        Route::get('/customer/add', 'AddCustomer')->name('customer.add')->middleware('permission:customer.add');
        Route::post('/customer/store', 'StoreCustomer')->name('customer.store')->middleware('permission:customer.store');
        Route::get('/customer/edit/{id}', 'EditCustomer')->name('customer.edit')->middleware('permission:customer.edit');
        Route::post('/customer/update', 'UpdateCustomer')->name('customer.update')->middleware('permission:customer.update');
        Route::get('/customer/delete/{id}', 'DeleteCustomer')->name('customer.delete')->middleware('permission:customer.delete');
    });



Laravel Naming Conventions Recap

************************Naming Convention Model/Table/Model Method***********************

| Case               | Use For                       | Example                          |
|--------------------|-------------------------------|----------------------------------|
| PascalCase         | Model Name                    | OrderDetail/Customer             |
| snake_case_plural  | Table Name                    | order_details                    |
| camelCase_plural   | hasMany Relationship Method   | orderDetails()/employees()       |
| camelCase_singular | belongsTo Relationship Method | order()/customer()               |
 
more example:
| PascalCase         | Model Name                    | ImportHistory                      |
| snake_case_plural  | Table Name                    | import_histories                   |





--------------------------------------id generator:---------------------------
composer require haruncpi/laravel-id-generator
$pcode = IdGenerator::generate([
            'table' => 'products',
            'field' => 'product_code',
            'length' => 5,
            'prefix' => 'PC-'
        ]);



-------------------------bar code generator:-------------------------------

composer require picqer/php-barcode-generator

 @php
    $generator = new Picqer\Barcode\BarcodeGeneratorHTML();
 @endphp

 <h3> {!! $generator->getBarcode($product->product_code,$generator::TYPE_CODE_128)  !!} </h3>


------------------------------Database Seeder----------------------------
------------------------------here we send all permission to database using database seeder---------------------
2.1.seeder
	php artisan make:seeder AssignAccountRoleSeeder
This will create a file at:
	database/seeders/AssignAccountRoleSeeder.php
	

2.2.সব permission গুলো PermissionSeeder.php তে দিয়ে দিব:
	class AssignAccountRoleSeeder extends Seeder
	{
		public function run(): void
		{
		}
	}
	

2.3.run:
	php artisan db:seed --class=AssignAccountRoleSeeder








-------------------------------------Excel--------------------
https://docs.laravel-excel.com/3.1/getting-started/installation.html



**********************export**********************

1.Step 1: Install the package:
composer require maatwebsite/excel


2.Step 2: Create an Export class(কোন টেবিল থেকে export হবে তা ডিফাইন করা হয়েছে:)
	php artisan make:export ProductsExport --model=Product
	
 Purpose: Creates a class where you define what data to export. It uses the Product model.


3.Step 3: Define export logic(কোন কোন column export হবে এবং excel file এর heading কি হবে তা এখানে দিয়ে দিব।)


Open app/Exports/ProductsExport.php and update like this:
namespace App\Exports;

use App\Models\Product;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;

class ProductsExport implements FromCollection, WithHeadings
{
    public function collection()
    {
        return Product::select(
            'product_name',
            'category_id',
            'supplier_id',
            'product_code',
            'product_garage',
            'product_image',
            'product_store',
            'buying_date',
            'expire_date',
            'buying_price',
            'selling_price'
        )->get();
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'Category ID',
            'Supplier ID',
            'Product Code',
            'Product Garage',
            'Product Image',
            'Product Store',
            'Buying Date',
            'Expire Date',
            'Buying Price',
            'Selling Price'
        ];
    }
}

purpose:
collection() → selects and returns data (excluding id, created_at, updated_at)

headings() → defines column headers in the Excel sheet



Step 4: Create route
In web.php:
	Route::get('/export-products', [ProductController::class, 'export'])->name('export.products');


Step 5: Create controller method(App\Exports\ProductsExport এর ডাটা ডাউনলোড হবে।)
	

	public function export()
	{
		return Excel::download(new ProductsExport, 'products.xlsx');
	}
	purpose: This triggers the export and sends the file download (products.xlsx) to the user’s browser.







********************************************import excel file********************************
এখানে import এর কাজ করব:

1.step1:Install Laravel Excel package(if already install no need:app/Imports/ProductsImport.php এখানে ক্লাসটি তৈরি হবে।)
composer require maatwebsite/excel

2.step2: Create an Import Class(কোন টেবিল এ ডাটা import হবে তা দিয়ে ProductsImport class বানাব:)
	php artisan make:import ProductsImport --model=Product
	
	purpose:Creates a PHP class that will handle how each row from the Excel sheet is converted into a Product record
	

3.step3. Define the Import Logic(excel file এ heading আছে তাই এখানে heading গুলো দিয়ি দিছি;
	heading না থাকলে/না দিলে $row[0],$row[1] এভাবে দিব column ০,১,,,,এর জন্য।)
	Open app/Imports/ProductsImport.php and update like this:
	
	<?php

		namespace App\Imports;

		use App\Models\Product;
		use Maatwebsite\Excel\Concerns\ToModel;
		use Maatwebsite\Excel\Concerns\WithHeadingRow;

		class ProductsImport implements ToModel, WithHeadingRow
		{
			/**
			* @param array $row
			*
			* @return \Illuminate\Database\Eloquent\Model|null
			*/
			public function model(array $row)
			{
				return new Product([
					'product_name'     => $row['product_name'],
					'category_id'      => $row['category_id'],
					'supplier_id'      => $row['supplier_id'],
					'product_code'     => $row['product_code'],
					'product_garage'   => $row['product_garage'],
					'product_image'    => $row['product_image'],
					'product_store'    => $row['product_store'],
					'buying_date'      => $row['buying_date'],
					'expire_date'      => $row['expire_date'],
					'buying_price'     => $row['buying_price'],
					'selling_price'    => $row['selling_price'],
				]);
			}
		}
		
3.route :
	Route::post('/import','Import')->name('import');
	
4.controller method:
	use App\Imports\ProductsImport;
	public function Import(Request $request){
        $request->validate([
            'import_file' => 'required|mimes:xlsx,xls,csv'
        ]);

        Excel::import(new ProductsImport, $request->file('import_file'));

        $notification = array(
            'message' => 'Product Added Successfully',
            'alert-type' => 'success'
        );

        return redirect()->route('all.product')->with($notification);

    }


5.blade এ route দিয়ে দিব:
	<form id="myForm" method="post" action="{{ route('import') }}" enctype="multipart/form-data">
	
	



***********************if we want not duplicate entry not push into database*******************************
<?php

namespace App\Imports;

use App\Models\Product;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\SkipsOnFailure;
use Maatwebsite\Excel\Concerns\SkipsFailures;
use Maatwebsite\Excel\Concerns\SkipsErrors;
use Maatwebsite\Excel\Concerns\WithValidation;
use Maatwebsite\Excel\Concerns\SkipsOnError;
use Throwable;

class ProductsImport implements ToCollection, WithHeadingRow, SkipsOnFailure, SkipsOnError, WithValidation
{
    use SkipsFailures, SkipsErrors;

    public function collection(Collection $rows)
    {
        DB::beginTransaction();

        try {
            foreach ($rows as $row) {
                $productCode = $row['product_code'];

                // Check duplicate in DB
                if (Product::where('product_code', $productCode)->exists()) {
                    throw new \Exception("Duplicate product_code found: $productCode");
                }

                // Create product
                Product::create([
                    'product_name'     => $row['product_name'],
                    'category_id'      => $row['category_id'],
                    'supplier_id'      => $row['supplier_id'],
                    'product_code'     => $productCode,
                    'product_garage'   => $row['product_garage'],
                    'product_image'    => $row['product_image'],
                    'product_store'    => $row['product_store'],
                    'buying_date'      => $row['buying_date'],
                    'expire_date'      => $row['expire_date'],
                    'buying_price'     => $row['buying_price'],
                    'selling_price'    => $row['selling_price'],
                ]);
            }

            DB::commit();

        } catch (\Exception $e) {
            DB::rollBack();
            throw $e; // Let the controller catch and show message
        }
    }


	//should give this;It validates each row of the Excel file before inserting it into the database.
    public function rules(): array
    {
        return [
            '*.product_code' => ['required'],
            '*.product_name' => ['required'],
        ];
    }
}

//controller udpate:
	public function Import(Request $request)
    {
        $request->validate([
            'import_file' => 'required|mimes:xlsx,xls,csv'
        ]);

        try {
            Excel::import(new ProductsImport, $request->file('import_file'));
        } catch (\Exception $e) {
            $notification = [
                'message' => 'Import failed: ' . $e->getMessage(),
                'alert-type' => 'error'
            ];
            return redirect()->back()->with($notification);
        }

        $notification = [
            'message' => 'Products Imported Successfully',
            'alert-type' => 'success'
        ];

        return redirect()->route('all.product')->with($notification);
    }









---------------------------------------6.own cart make-----------------------------------------

 Step 0: Use Laravel Session to Store Cart Data
	You'll store cart items in the session using Laravel's session() helper.
	[
		'id' => 1,
		'name' => 'Product Name',
		'qty' => 2,
		'price' => 100,
		'subtotal' => 200,
	]
Step 0: Design the Cart Structure in Session(এটাই মূলত cart যেখানে cart এর আইটেম গুলো স্টোর হবে)
	{
		"12(product id)": {
			"id": "12",
			"name": "Mouse",
			"qty": "1",
			"price": "684",
			"subtotal": 684
		},
		"11": {
			"id": "11",
			"name": "Computer",
			"qty": "1",
			"price": "684",
			"subtotal": 684
		}
	}



step1:create all route(cart data show,cart add, cart update,cart remove):

	// POS with own made cart (prefix: own)
    Route::prefix('own')->controller(PosController::class)->group(function () {
        Route::get('/pos', 'OwnPos')->name('own.pos');
        Route::post('/add-cart', 'OwnAddCart')->name('own.add.cart');
        Route::post('/cart-update/{productId}', 'OwnCartUpdate')->name('own.cart.update');
        Route::get('/cart-remove/{productId}', 'OwnCartRemove')->name('own.cart.remove');


        //this route for testing ; showing cart items
        Route::get('/allitem','OwnAllItem');
        //for destroy cart item
        Route::get('/cart-destroy', 'OwnDestroyCart')->name('own.cart.destroy');
    });
	

step2:controller method;

	//this will show all product,customer,all cart data if exit;
	//here we calculate cart total item,total item price,total vat everything
	public function OwnPos() {
        $product = Product::latest()->get();
        $customer = Customer::latest()->get();
        $cart = session()->get('own_cart', []);

        $cartTotalQty = 0;
        $cartSubTotal = 0;

        foreach ($cart as $item) {
            $cartTotalQty += $item['qty'];
            $cartSubTotal += $item['qty'] * $item['price'];
        }

        $vat = $cartSubTotal * 0.05;
        $total = $cartSubTotal + $vat;

        return view('backend.pos.own_pos_page', compact(
            'product',
            'customer',
            'cart',
            'cartTotalQty',
            'cartSubTotal',
            'vat',
            'total'
        ));
    }


step3: make pos_page.blade file for showing all product,cart added item
	see blade(own_pos_page.blade.php)
	//add item in cart
	 @foreach($product as $key => $item)
		<tr>
			<form method="POST" action="{{ route('own.add.cart') }}">
				@csrf
				<input type="hidden" name="id" value="{{ $item->id }}">
				<input type="hidden" name="name" value="{{ $item->product_name }}">
				<input type="hidden" name="qty" value="1">
				<input type="hidden" name="price" value="{{ $item->selling_price }}">
				<td>{{ $key + 1 }}</td>
				<td><img src="{{ asset($item->product_image) }}" style="width:50px; height:40px;"></td>
				<td>{{ $item->product_name }}</td>
				<td>
					<button type="submit" class="btn btn-outline-primary btn-sm">
						<i class="fas fa-plus-square"></i>
					</button>
				</td>
			</form>
		</tr>
	@endforeach
	
	//show item from cart
	<tbody>
		@php
			$ownCart = session('own_cart', []);
		@endphp


		/*12": {
			"id": "12",
			"name": "Mouse",
			"qty": "1",
			"price": "684",
			"subtotal": 684
		}
		
		$productId=12
		$item={
			"id": "12",
			"name": "Mouse",
			"qty": "1",
			"price": "684",
			"subtotal": 684
		}
		*/
		@if(count($ownCart) > 0)
			@foreach(session('own_cart') as $productId => $item)
				@php
					$subTotal = $item['price'] * $item['qty'];
				@endphp
				<tr>
					<td>{{ $item['name'] }}</td>
					<td>
						<form method="POST" action="{{ route('own.cart.update', $productId) }}">
							@csrf
							<input type="number" name="qty" value="{{ $item['qty'] }}" style="width: 50px;" min="1">
							<button type="submit" class="btn btn-sm btn-success"><i class="fas fa-check"></i></button>
						</form>
					</td>
					<td>{{ $item['price'] }}</td>
					<td>{{ $subTotal }}</td>
					<td>
						<a href="{{ route('own.cart.remove', $productId) }}" class="btn btn-danger btn-sm"><i class="fas fa-trash-alt"></i></a>
					</td>
				</tr>
			@endforeach
		@else
			<tr>
				<td colspan="5">Cart is empty.</td>
			</tr>
		@endif
	</tbody>
	

step4:add item in cart
	<form method="POST" action="{{ route('own.add.cart') }}">
	যখন item submit করা হবে product list থেকে তখন cart এ আইটেম add হবে।
	
	
	//this will add item in cart
    public function OwnAddCart(Request $request) {
        //$cart = session()->get('cart', []);
        $cart = session()->get('own_cart', []);

        $productId = $request->id;

        // If item already in cart, increase qty
        if (isset($cart[$productId])) {
            $cart[$productId]['qty'] += $request->qty;
            $cart[$productId]['subtotal'] = $cart[$productId]['qty'] * $cart[$productId]['price'];
        } else {
            $cart[$productId] = [
                'id' => $productId,
                'name' => $request->name,
                'qty' => $request->qty,
                'price' => $request->price,
                'subtotal' => $request->qty * $request->price,
            ];
        }

        //session()->put('cart', $cart);
        session()->put('own_cart', $cart);//give own cart name; not to interfere with global cart

        return redirect()->back()->with('success', 'Product added to cart successfully.');
    }



step5:update cart item
	<form method="POST" action="{{ route('own.cart.update', $productId) }}">
	যখন counter increase করে udpate button এ ক্লিক করবে তখন cart ডাটা আপডেট হবে।
	
	
	//this will update cart item,price
    public function OwnCartUpdate(Request $request, $productId) {
        //$cart = session()->get('cart', []);
        $cart = session()->get('own_cart', []);//own cart; for not conflict with global cart

        if (isset($cart[$productId])) {
            $cart[$productId]['qty'] = $request->qty;
            $cart[$productId]['subtotal'] = $request->qty * $cart[$productId]['price'];
            //session()->put('cart', $cart);
            session()->put('own_cart', $cart);//give own cart name; not to interfere with global cart
        }

        return redirect()->back()->with('success', 'Cart updated successfully.');
    }
	



step6:item remove from cart
	<td>
		<a href="{{ route('own.cart.remove', $productId) }}" class="btn btn-danger btn-sm"><i class="fas fa-trash-alt"></i></a>
	</td>
	
যখন item remove করা হবে তখন item টি cart থেকে চলে যাবে।

//this will remove item from cart
    public function OwnCartRemove($productId) {
        //$cart = session()->get('cart', []);
        $cart = session()->get('own_cart', []);//give own cart name; not to interfere with global cart
        unset($cart[$productId]);
        //session()->put('cart', $cart);
        session()->put('own_cart', $cart);//give own cart name; not to interfere with global cart

        return redirect()->back()->with('success', 'Cart item removed successfully.');
    }
	
	
	

step7:testing
	
	এর মাধ্যমে শুধুমাত্র cart এর ডাটা গুলো দেখব:
	
	//testing puropose; showing cart data
    public function OwnAllItem(){
        //$product_item = session()->get('cart', []);
        $product_item = session()->get('own_cart', []);//give own cart name; not to interfere with global cart


        return view('backend.pos.own_text_item',compact('product_item'));

    } // End Method More actions


step8:cart destroy
	public function OwnDestroyCart()
    {
        //session()->forget('cart'); // Remove the entire cart session
        //session()->forget('own_cart'); // Remove the entire cart session

        $notification = array(
            'message' => 'All Cart Items Removed Successfully',
            'alert-type' => 'success'
        );

        return redirect()->back()->with($notification);
    }






