---------------all commit--------
https://github.com/easylearningbd/laravel-point-of-sale






--------------------install project---------------------------
1.download composer(if not installed)
check composer and php

php -v
composer -V
https://getcomposer.org/download/


2.create project 
composer create-project laravel/laravel my-project


------------------------------Breeze Install----------------------------
---------Breeze install(video1-3)----------------

//Breeze Install

//go to this link(no need)
//https://laravel.com/docs/11.x/starter-kits#laravel-breeze

//step1
composer require laravel/breeze --dev

//step2
php artisan breeze:install



blade → ✔️ great for traditional apps

yes to dark mode → ✔️ nice UX feature

PHPUnit → ✔️ standard and robust testing



//step3 install nodejs if not installed in your computer(for one time in pc)
https://nodejs.org/en

//step4
npm install && npm run dev

(press enter or ctrl+c after executing)

//step5
connect with database in .env file

//step6
php artisan migrate

//step7(From Here we can get home page and get redimate login,logout and register page)
http://127.0.0.1:8000/







Laravel Naming Conventions Recap

| Type                | Example                      | Notes                                |
|---------------------|-------------------------------|------------------------------------ |
| Model class         | AdvanceSalary                | PascalCase (studly caps)             |
| Table name          | advance_salaries             | snake_case plural                    |
| Relationship method | advanceSalaries()            | camelCase plural (for hasMany)       |
| BelongsTo method    | employee()                   | camelCase singular                   |
| has method          | attendance()                 | camelCase singular                   |





--------------------------------------id generator:---------------------------
composer require haruncpi/laravel-id-generator
$pcode = IdGenerator::generate([
            'table' => 'products',
            'field' => 'product_code',
            'length' => 5,
            'prefix' => 'PC-'
        ]);



-------------------------bar code generator:-------------------------------

composer require picqer/php-barcode-generator

 @php
    $generator = new Picqer\Barcode\BarcodeGeneratorHTML();
 @endphp

 <h3> {!! $generator->getBarcode($product->product_code,$generator::TYPE_CODE_128)  !!} </h3>





-------------------------------------Excel--------------------
https://docs.laravel-excel.com/3.1/getting-started/installation.html



**********************export**********************

1.Step 1: Install the package:
composer require maatwebsite/excel


2.Step 2: Create an Export class(কোন টেবিল থেকে export হবে তা ডিফাইন করা হয়েছে:)
	php artisan make:export ProductsExport --model=Product
	
 Purpose: Creates a class where you define what data to export. It uses the Product model.


3.Step 3: Define export logic(কোন কোন column export হবে এবং excel file এর heading কি হবে তা এখানে দিয়ে দিব।)


Open app/Exports/ProductsExport.php and update like this:
namespace App\Exports;

use App\Models\Product;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;

class ProductsExport implements FromCollection, WithHeadings
{
    public function collection()
    {
        return Product::select(
            'product_name',
            'category_id',
            'supplier_id',
            'product_code',
            'product_garage',
            'product_image',
            'product_store',
            'buying_date',
            'expire_date',
            'buying_price',
            'selling_price'
        )->get();
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'Category ID',
            'Supplier ID',
            'Product Code',
            'Product Garage',
            'Product Image',
            'Product Store',
            'Buying Date',
            'Expire Date',
            'Buying Price',
            'Selling Price'
        ];
    }
}

purpose:
collection() → selects and returns data (excluding id, created_at, updated_at)

headings() → defines column headers in the Excel sheet



Step 4: Create route
In web.php:
	Route::get('/export-products', [ProductController::class, 'export'])->name('export.products');


Step 5: Create controller method(App\Exports\ProductsExport এর ডাটা ডাউনলোড হবে।)
	

	public function export()
	{
		return Excel::download(new ProductsExport, 'products.xlsx');
	}
	purpose: This triggers the export and sends the file download (products.xlsx) to the user’s browser.





