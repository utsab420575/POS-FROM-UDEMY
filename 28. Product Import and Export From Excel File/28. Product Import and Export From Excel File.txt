*******************************28. Product Import and Export From Excel File***********************************


------------------------------1. Product Import and Export From Excel File Introduction--------------------------------
https://docs.laravel-excel.com/3.1/getting-started/



1.Step 1: Install the package:
composer require maatwebsite/excel


2.Step 2: Create an Export class(কোন টেবিল থেকে export হবে তা ডিফাইন করা হয়েছে:)
	php artisan make:export ProductsExport --model=Product
	
 Purpose: Creates a class where you define what data to export. It uses the Product model.


3.Step 3: Define export logic(কোন কোন column export হবে এবং excel file এর heading কি হবে তা এখানে দিয়ে দিব।)


Open app/Exports/ProductsExport.php and update like this:
namespace App\Exports;

use App\Models\Product;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;

class ProductsExport implements FromCollection, WithHeadings
{
    public function collection()
    {
        return Product::select(
            'product_name',
            'category_id',
            'supplier_id',
            'product_code',
            'product_garage',
            'product_image',
            'product_store',
            'buying_date',
            'expire_date',
            'buying_price',
            'selling_price'
        )->get();
    }

    public function headings(): array
    {
        return [
            'Product Name',
            'Category ID',
            'Supplier ID',
            'Product Code',
            'Product Garage',
            'Product Image',
            'Product Store',
            'Buying Date',
            'Expire Date',
            'Buying Price',
            'Selling Price'
        ];
    }
}

purpose:
collection() → selects and returns data (excluding id, created_at, updated_at)

headings() → defines column headers in the Excel sheet



Step 4: Create route
In web.php:
	Route::get('/export-products', [ProductController::class, 'export'])->name('export.products');


Step 5: Create controller method(App\Exports\ProductsExport এর ডাটা ডাউনলোড হবে।)
	

	public function export()
	{
		return Excel::download(new ProductsExport, 'products.xlsx');
	}
	purpose: This triggers the export and sends the file download (products.xlsx) to the user’s browser.
	
 


-----------------------------------------------------------3. How to Import and Export Product Part 1--------------
এখানে import/export করার জন্য blade(excel file upload option থাকবে,export option থাকবে)বানাব:

route:
	Route::get('/import/product','ImportProduct')->name('import.product');
controller:
	public function ImportProduct(){
        return view('backend.product.import_product');
    }// End Method
view:(এখানে ডাউনলোড,আপলোড অপশন থাকবে।)
	php artisan make:view backend.product.import_product
	
	
	
	

------------------------------------------------------4. How to Import and Export Product Part 2------------------
এখানে আমরা export(download) button এর কাজ করব:

1.route:
	Route::get('/export','Export')->name('export');
2.controller method:
	 public function Export(){
        return Excel::download(new ProductExport,'products.xlsx');
    }// End Method
	
3.blade এ route দিয়ে দিব:
	 <a href="{{ route('export') }}" class="btn btn-primary rounded-pill waves-effect waves-light">Download Xlsx</a>
	 
	 



-----------------------------------------------------5. How to Import and Export Product Part 3-----------------------
এখানে import এর কাজ করব:

1.step1:Install Laravel Excel package(if already install no need:app/Imports/ProductsImport.php এখানে ক্লাসটি তৈরি হবে।)
composer require maatwebsite/excel

2.step2: Create an Import Class(কোন টেবিল এ ডাটা import হবে তা দিয়ে ProductsImport class বানাব:)
	php artisan make:import ProductsImport --model=Product
	
	purpose:Creates a PHP class that will handle how each row from the Excel sheet is converted into a Product record
	

3.step3. Define the Import Logic(excel file এ heading আছে তাই এখানে heading গুলো দিয়ি দিছি;
	heading না থাকলে/না দিলে $row[0],$row[1] এভাবে দিব column ০,১,,,,এর জন্য।)
	Open app/Imports/ProductsImport.php and update like this:
	
	<?php

		namespace App\Imports;

		use App\Models\Product;
		use Maatwebsite\Excel\Concerns\ToModel;
		use Maatwebsite\Excel\Concerns\WithHeadingRow;

		class ProductsImport implements ToModel, WithHeadingRow
		{
			/**
			* @param array $row
			*
			* @return \Illuminate\Database\Eloquent\Model|null
			*/
			public function model(array $row)
			{
				return new Product([
					'product_name'     => $row['product_name'],
					'category_id'      => $row['category_id'],
					'supplier_id'      => $row['supplier_id'],
					'product_code'     => $row['product_code'],
					'product_garage'   => $row['product_garage'],
					'product_image'    => $row['product_image'],
					'product_store'    => $row['product_store'],
					'buying_date'      => $row['buying_date'],
					'expire_date'      => $row['expire_date'],
					'buying_price'     => $row['buying_price'],
					'selling_price'    => $row['selling_price'],
				]);
			}
		}
		
3.route :
	Route::post('/import','Import')->name('import');
	
4.controller method:
	use App\Imports\ProductsImport;
	public function Import(Request $request){
        $request->validate([
            'import_file' => 'required|mimes:xlsx,xls,csv'
        ]);

        Excel::import(new ProductsImport, $request->file('import_file'));

        $notification = array(
            'message' => 'Product Added Successfully',
            'alert-type' => 'success'
        );

        return redirect()->route('all.product')->with($notification);

    }


5.blade এ route দিয়ে দিব:
	<form id="myForm" method="post" action="{{ route('import') }}" enctype="multipart/form-data">
	
	



***********************if we want not duplicate entry not push into database*******************************
<?php

namespace App\Imports;

use App\Models\Product;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\SkipsOnFailure;
use Maatwebsite\Excel\Concerns\SkipsFailures;
use Maatwebsite\Excel\Concerns\SkipsErrors;
use Maatwebsite\Excel\Concerns\WithValidation;
use Maatwebsite\Excel\Concerns\SkipsOnError;
use Throwable;

class ProductsImport implements ToCollection, WithHeadingRow, SkipsOnFailure, SkipsOnError, WithValidation
{
    use SkipsFailures, SkipsErrors;

    public function collection(Collection $rows)
    {
        DB::beginTransaction();

        try {
            foreach ($rows as $row) {
                $productCode = $row['product_code'];

                // Check duplicate in DB
                if (Product::where('product_code', $productCode)->exists()) {
                    throw new \Exception("Duplicate product_code found: $productCode");
                }

                // Create product
                Product::create([
                    'product_name'     => $row['product_name'],
                    'category_id'      => $row['category_id'],
                    'supplier_id'      => $row['supplier_id'],
                    'product_code'     => $productCode,
                    'product_garage'   => $row['product_garage'],
                    'product_image'    => $row['product_image'],
                    'product_store'    => $row['product_store'],
                    'buying_date'      => $row['buying_date'],
                    'expire_date'      => $row['expire_date'],
                    'buying_price'     => $row['buying_price'],
                    'selling_price'    => $row['selling_price'],
                ]);
            }

            DB::commit();

        } catch (\Exception $e) {
            DB::rollBack();
            throw $e; // Let the controller catch and show message
        }
    }


	//should give this;It validates each row of the Excel file before inserting it into the database.
    public function rules(): array
    {
        return [
            '*.product_code' => ['required'],
            '*.product_name' => ['required'],
        ];
    }
}

//controller udpate:
	public function Import(Request $request)
    {
        $request->validate([
            'import_file' => 'required|mimes:xlsx,xls,csv'
        ]);

        try {
            Excel::import(new ProductsImport, $request->file('import_file'));
        } catch (\Exception $e) {
            $notification = [
                'message' => 'Import failed: ' . $e->getMessage(),
                'alert-type' => 'error'
            ];
            return redirect()->back()->with($notification);
        }

        $notification = [
            'message' => 'Products Imported Successfully',
            'alert-type' => 'success'
        ];

        return redirect()->route('all.product')->with($notification);
    }



	

	 
	 
	 


	


